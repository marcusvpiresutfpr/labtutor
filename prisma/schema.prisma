generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String?
  image String?
  email String? @unique
  role  Role    @default(USER)

  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  emailVerified DateTime?

  articles Article[]
  account  Account[]
  session  Session[]

  @@map(name: "users")
}

model Article {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  slug    String  @unique
  title   String
  image   String?
  content String?
  status  String  @default("draft")

  categories  Category[] @relation(fields: [categoryIDs], references: [id])
  categoryIDs String[]   @db.ObjectId
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String     @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  articleIDs String[]  @db.ObjectId
  articles   Article[] @relation(fields: [articleIDs], references: [id])
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
